{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/components/footer/footer.component.css","webpack:///./src/app/components/footer/footer.component.html","webpack:///./src/app/components/footer/footer.component.ts","webpack:///./src/app/components/navbar/navbar.component.css","webpack:///./src/app/components/navbar/navbar.component.html","webpack:///./src/app/components/navbar/navbar.component.ts","webpack:///./src/app/components/settings/settings.component.css","webpack:///./src/app/components/settings/settings.component.html","webpack:///./src/app/components/settings/settings.component.ts","webpack:///./src/app/models/sensor.model.ts","webpack:///./src/app/models/settings.model.ts","webpack:///./src/app/services/app.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<app-navbar></app-navbar>\\r\\n<router-outlet></router-outlet>\\r\\n<app-footer></app-footer>\\r\\n\"","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { HttpModule } from '@angular/http';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { SettingsComponent } from './components/settings/settings.component';\r\nimport { NavbarComponent } from './components/navbar/navbar.component';\r\nimport { FooterComponent } from './components/footer/footer.component';\r\n\r\nconst appRoutes: Routes = [\r\n  { path: '', redirectTo: 'settings', pathMatch: 'full' },\r\n  { path: 'settings', component: SettingsComponent }\r\n];\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    SettingsComponent,\r\n    NavbarComponent,\r\n    FooterComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    HttpModule,\r\n    HttpClientModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    RouterModule.forRoot(\r\n      appRoutes\r\n    )\r\n  ],\r\n  providers: [HttpClientModule],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","module.exports = \"\"","module.exports = \"<footer class=\\\"footer\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n    <span class=\\\"text-muted\\\">&copy; <a href=\\\"https://honey-pi.de\\\" target=\\\"_blank\\\">Honey-Pi.de</a> | v{{ appVersion }}</span>\\r\\n  </div>\\r\\n</footer>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\n\r\ndeclare function require(moduleName: string): any;\r\nconst { version: appVersion } = require('../../../../package.json')\r\n\r\n@Component({\r\n  selector: 'app-footer',\r\n  templateUrl: './footer.component.html',\r\n  styleUrls: ['./footer.component.css']\r\n})\r\nexport class FooterComponent implements OnInit {\r\n\r\n  public appVersion;\r\n\r\n  constructor() {\r\n    this.appVersion = appVersion;\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","module.exports = \"\"","module.exports = \"<nav class=\\\"navbar navbar-dark bg-dark\\\">\\r\\n  <a class=\\\"navbar-brand\\\" href=\\\"\\\">HoneyPi</a>\\r\\n</nav>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-navbar',\r\n  templateUrl: './navbar.component.html',\r\n  styleUrls: ['./navbar.component.css']\r\n})\r\nexport class NavbarComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","module.exports = \"\"","module.exports = \"<main role=\\\"main\\\" class=\\\"container\\\">\\r\\n  <div class=\\\"jumbotron\\\">\\r\\n    <h1>Hardware Einstellungen</h1>\\r\\n    <div id=\\\"accordion\\\">\\r\\n      <div class=\\\"card\\\">\\r\\n        <div class=\\\"card-header\\\" id=\\\"headingOne\\\">\\r\\n          <h5 class=\\\"mb-0\\\">\\r\\n            <button class=\\\"btn btn-link collapsed\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#collapseOne\\\" aria-expanded=\\\"true\\\" aria-controls=\\\"collapseOne\\\">\\r\\n              ThingsSpeak Einstellungen\\r\\n            </button>\\r\\n            <div class=\\\"float-right\\\">\\r\\n              <button class=\\\"btn btn-primary\\\" type=\\\"button\\\" (click)=\\\"saveSettings()\\\">Speichern</button>\\r\\n            </div>\\r\\n          </h5>\\r\\n        </div>\\r\\n        <div id=\\\"collapseOne\\\" class=\\\"collapse\\\" aria-labelledby=\\\"headingOne\\\" data-parent=\\\"#accordion\\\">\\r\\n          <div class=\\\"card-body\\\">\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"tsChannelId\\\">ThingsSpeak Channel-ID</label>\\r\\n              <input type=\\\"number\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"settings.tsChannelId\\\" id=\\\"tsChannelId\\\" name=\\\"tsChannelId\\\" placeholder=\\\"Channel-ID\\\">\\r\\n            </div>\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"tsWriteKey\\\">ThingsSpeak Write-Key</label>\\r\\n              <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"settings.tsWriteKey\\\" id=\\\"tsWriteKey\\\" name=\\\"tsWriteKey\\\" placeholder=\\\"Write-Key\\\">\\r\\n            </div>\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"tsReadKey\\\">ThingsSpeak Read-Key</label>\\r\\n              <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"settings.tsReadKey\\\" id=\\\"tsReadKey\\\" name=\\\"tsReadKey\\\" placeholder=\\\"Read-Key\\\">\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n      <div class=\\\"card\\\">\\r\\n        <div class=\\\"card-header\\\" id=\\\"headingTwo\\\">\\r\\n          <h5 class=\\\"mb-0\\\">\\r\\n            <button class=\\\"btn btn-link collapsed\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#collapseTwo\\\" aria-expanded=\\\"false\\\" aria-controls=\\\"collapseTwo\\\">\\r\\n              Mobilfunkübertragung\\r\\n            </button>\\r\\n            <div class=\\\"float-right\\\">\\r\\n              <button class=\\\"btn btn-primary\\\" type=\\\"button\\\" (click)=\\\"saveSettings()\\\">Speichern</button>\\r\\n            </div>\\r\\n          </h5>\\r\\n        </div>\\r\\n        <div id=\\\"collapseTwo\\\" class=\\\"collapse\\\" aria-labelledby=\\\"headingTwo\\\" data-parent=\\\"#accordion\\\">\\r\\n          <div class=\\\"card-body\\\">\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"simApn\\\">APN der SIM-Karte</label>\\r\\n              <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"settings.simApn\\\" id=\\\"simApn\\\" name=\\\"simApn\\\" placeholder=\\\"APN\\\">\\r\\n            </div>\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"simTime\\\">Übertragungsintervall</label>\\r\\n              <select [(ngModel)]=\\\"settings.simTime\\\" id=\\\"simTime\\\" name=\\\"simTime\\\" class=\\\"custom-select\\\">\\r\\n                <option value=\\\"1\\\">1min</option>\\r\\n                <option value=\\\"5\\\">5min</option>\\r\\n                <option value=\\\"30\\\">30min</option>\\r\\n                <option value=\\\"60\\\">1h</option>\\r\\n                <option value=\\\"180\\\">3h</option>\\r\\n              </select>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n      <div class=\\\"card\\\">\\r\\n        <div class=\\\"card-header\\\" id=\\\"headingThree\\\">\\r\\n          <h5 class=\\\"mb-0\\\">\\r\\n            <button class=\\\"btn btn-link collapsed\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#collapseThree\\\" aria-expanded=\\\"false\\\" aria-controls=\\\"collapseThree\\\">\\r\\n              Angeschlossene Sensoren\\r\\n            </button>\\r\\n            <div class=\\\"float-right\\\">\\r\\n              <button class=\\\"btn btn-primary\\\" type=\\\"button\\\" (click)=\\\"saveSettings()\\\">Speichern</button>\\r\\n            </div>\\r\\n          </h5>\\r\\n        </div>\\r\\n        <div id=\\\"collapseThree\\\" class=\\\"collapse\\\" aria-labelledby=\\\"headingThree\\\" data-parent=\\\"#accordion\\\">\\r\\n          <div class=\\\"card-body\\\">\\r\\n            <table class=\\\"table table-bordered table-striped table-sm table-responsive-md\\\">\\r\\n              <thead>\\r\\n              <tr>\\r\\n                <th>Sensortyp</th>\\r\\n                <th>ThingsSpeak-Feldname</th>\\r\\n                <th>Messintervall</th>\\r\\n                <th>GPIO-PIN</th>\\r\\n                <th>Entfernen</th>\\r\\n              </tr>\\r\\n              </thead>\\r\\n              <tbody id=\\\"sensors\\\">\\r\\n              <tr *ngFor=\\\"let sensor of settings.sensoren; let i = index\\\">\\r\\n                <td>\\r\\n                  <select [(ngModel)]=\\\"sensor.type\\\" name=\\\"sensor-type\\\" class=\\\"custom-select\\\">\\r\\n                    <option value=\\\"0\\\">Temperatursensor (DS18b20)</option>\\r\\n                    <option value=\\\"1\\\">BME680 (Temperatur+Luftfeuchtigkeit+Luftdruck+Qualität)</option>\\r\\n                    <option value=\\\"2\\\">Gewichtssensor (A/D: HX711)</option>\\r\\n                  </select>\\r\\n                </td>\\r\\n                <td>\\r\\n                  <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"sensor.tsField\\\" name=\\\"tsField\\\" placeholder=\\\"Feldname\\\">\\r\\n                </td>\\r\\n                <td>\\r\\n                  <select [(ngModel)]=\\\"sensor.time\\\" name=\\\"sensor-time\\\" class=\\\"custom-select\\\">\\r\\n                    <option value=\\\"1\\\">1min</option>\\r\\n                    <option value=\\\"5\\\">5min</option>\\r\\n                    <option value=\\\"30\\\">30min</option>\\r\\n                    <option value=\\\"60\\\">1h</option>\\r\\n                    <option value=\\\"180\\\">3h</option>\\r\\n                  </select>\\r\\n                </td>\\r\\n                <td>\\r\\n                  <input type=\\\"text\\\" class=\\\"form-control\\\"  [(ngModel)]=\\\"sensor.pin\\\" name=\\\"pin\\\" placeholder=\\\"PIN\\\">\\r\\n                </td>\\r\\n                <td>\\r\\n                  <button class=\\\"btn btn-danger\\\" (click)=\\\"removeSensor(i)\\\">\\r\\n                    &#x232b;\\r\\n                  </button>\\r\\n                </td>\\r\\n              </tr>\\r\\n              <tr>\\r\\n                <td colspan=\\\"5\\\">\\r\\n                  <button class=\\\"btn btn-primary\\\" (click)=\\\"addSensor()\\\">\\r\\n                    &#x2b; Sensor hinzufügen\\r\\n                  </button>\\r\\n                </td>\\r\\n              </tr>\\r\\n              </tbody>\\r\\n            </table>\\r\\n            <hr />\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"set_reference_unit\\\">Wägezellen Kalibrierungswert</label>\\r\\n              <input type=\\\"number\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"settings.set_reference_unit\\\" id=\\\"set_reference_unit\\\" name=\\\"set_reference_unit\\\" placeholder=\\\"Kalibrierungswert\\\">\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</main>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { AppService } from '../../services/app.service';\r\nimport { Settings } from \"../../models/settings.model\";\r\nimport { Sensor } from '../../models/sensor.model';\r\n\r\n@Component({\r\n  selector: 'app-settings',\r\n  templateUrl: './settings.component.html',\r\n  styleUrls: ['./settings.component.css']\r\n})\r\nexport class SettingsComponent implements OnInit {\r\n\r\n  public settings: Settings = new Settings();\r\n  constructor(private appService: AppService) { }\r\n\r\n  ngOnInit() {\r\n    /* initial load */\r\n    this.getSettings();\r\n  }\r\n\r\n  getSettings(): void {\r\n    this.appService.getSettings()\r\n      .subscribe(res => {\r\n        this.settings = <any>res;\r\n      }, (err: any) => {console.log(err.status); console.log(err);});\r\n  }\r\n\r\n  saveSettings(): void  {\r\n    this.appService.setSettings(this.settings).subscribe(res => {\r\n      console.log(res);\r\n      // load new Settings\r\n      this.getSettings();\r\n    }, (err: any) => {console.log(err.status); console.log(err);});\r\n  }\r\n\r\n  addSensor(): void {\r\n    this.settings.sensoren.push(new Sensor());\r\n  }\r\n\r\n  removeSensor(index: number): void {\r\n    this.settings.sensoren.splice(index,1);\r\n  }\r\n\r\n}\r\n","export class Sensor {\r\n  constructor(  type: number = 0,\r\n                tsField: string = \"field1\",\r\n                time: number = 1,\r\n                pin: string = \"4\") {\r\n    this.type = type;\r\n    this.tsField = tsField;\r\n    this.time = time;\r\n    this.pin = pin;\r\n  }\r\n\r\n  type: number;\r\n  tsField: string;\r\n  time: number;\r\n  pin: string;\r\n}\r\n","import { Sensor } from \"./sensor.model\";\r\n\r\nexport class Settings {\r\n\r\n  constructor() {\r\n    this.sensoren = new Array<Sensor>();\r\n  }\r\n  tsChannelId: number;\r\n  tsReadKey: string;\r\n  tsWriteKey: string;\r\n  simApn: string;\r\n  simTime: number;\r\n  set_reference_unit: number;\r\n  sensoren: Sensor[];\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Settings } from \"../models/settings.model\";\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport \"rxjs/add/operator/map\";\r\nimport {RequestOptions} from '@angular/http';\r\n\r\nconst apiUrl = 'https://honey-pi.de/webinterface-test/settings.php';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AppService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getSettings(): Observable<Response> {\r\n    let timestamp = \"&t=\" + ((new Date()).getTime());\r\n    return this.http.get(apiUrl + '?getSettings' + timestamp)\r\n      .map((response: Response) => {\r\n        switch (response.status) {\r\n          case 200 :\r\n            return response;\r\n          default :\r\n            return response;\r\n        }\r\n      });\r\n  }\r\n\r\n  setSettings(newSettings: Settings): Observable<Response> {\r\n    return this.http.post(apiUrl + '?setSettings', JSON.stringify(newSettings)).map((response: Response) => {\r\n      switch (response.status) {\r\n        case 200 :\r\n          return response;\r\n        default :\r\n          return response;\r\n      }\r\n    });\r\n  }\r\n}\r\n","// The file contents for the current environment will overwrite these during build.\r\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\r\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\r\n// The list of which env maps to which file can be found in `.angular-cli.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.log(err));\r\n"],"sourceRoot":""}