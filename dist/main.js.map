{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/components/footer/footer.component.css","webpack:///./src/app/components/footer/footer.component.html","webpack:///./src/app/components/footer/footer.component.ts","webpack:///./src/app/components/internet/internet.component.css","webpack:///./src/app/components/internet/internet.component.html","webpack:///./src/app/components/internet/internet.component.ts","webpack:///./src/app/components/log/log.component.css","webpack:///./src/app/components/log/log.component.html","webpack:///./src/app/components/log/log.component.ts","webpack:///./src/app/components/measurement/measurement.component.css","webpack:///./src/app/components/measurement/measurement.component.html","webpack:///./src/app/components/measurement/measurement.component.ts","webpack:///./src/app/components/navbar/navbar.component.css","webpack:///./src/app/components/navbar/navbar.component.html","webpack:///./src/app/components/navbar/navbar.component.ts","webpack:///./src/app/components/settings/settings.component.css","webpack:///./src/app/components/settings/settings.component.html","webpack:///./src/app/components/settings/settings.component.ts","webpack:///./src/app/components/settings/ts-field/ts-field.component.css","webpack:///./src/app/components/settings/ts-field/ts-field.component.html","webpack:///./src/app/components/settings/ts-field/ts-field.component.ts","webpack:///./src/app/models/sensor.model.ts","webpack:///./src/app/models/settings.model.ts","webpack:///./src/app/models/wifi.model.ts","webpack:///./src/app/services/app.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<app-navbar></app-navbar>\\n<router-outlet></router-outlet>\\n<app-footer></app-footer>\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { AppComponent } from './app.component';\nimport { SettingsComponent } from './components/settings/settings.component';\nimport { NavbarComponent } from './components/navbar/navbar.component';\nimport { FooterComponent } from './components/footer/footer.component';\nimport { TsFieldComponent } from './components/settings/ts-field/ts-field.component';\nimport { InternetComponent } from './components/internet/internet.component';\nimport { LogComponent } from './components/log/log.component';\nimport { MeasurementComponent } from './components/measurement/measurement.component';\n\nconst appRoutes: Routes = [\n  { path: '', component: SettingsComponent }\n];\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    SettingsComponent,\n    NavbarComponent,\n    FooterComponent,\n    TsFieldComponent,\n    InternetComponent,\n    LogComponent,\n    MeasurementComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule.forRoot(\n      appRoutes\n    )\n  ],\n  providers: [HttpClientModule],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"\"","module.exports = \"<footer class=\\\"footer\\\">\\n  <div class=\\\"container\\\">\\n    <span class=\\\"text-muted\\\">&copy; <a href=\\\"https://www.honey-pi.de\\\" target=\\\"_blank\\\">Honey-Pi.de</a> | v{{ appVersion }}</span>\\n  </div>\\n</footer>\\n\"","import { Component, OnInit } from '@angular/core';\n\ndeclare function require(moduleName: string): any;\nconst { version: appVersion } = require('../../../../package.json')\n\n@Component({\n  selector: 'app-footer',\n  templateUrl: './footer.component.html',\n  styleUrls: ['./footer.component.css']\n})\nexport class FooterComponent implements OnInit {\n\n  public appVersion;\n\n  constructor() {\n    this.appVersion = appVersion;\n  }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"alert alert-info\\\">Die Änderungen in diesem Bereich werden nach einem Neustart aktiv.</div>\\n<hr />\\n<h5 class=\\\"h5\\\">WLAN Internetzugang</h5>\\n<div class=\\\"form-check\\\">\\n  <input class=\\\"form-check-input\\\" type=\\\"checkbox\\\" [(ngModel)]=\\\"wifi.enabled\\\" id=\\\"enabledWifi\\\">\\n  <label class=\\\"form-check-label\\\" for=\\\"enabledWifi\\\">\\n    Mit vorhandenem WLAN-Netzwerk verbinden, wenn verfügbar?\\n  </label>\\n</div>\\n<div class=\\\"row\\\" *ngIf=\\\"wifi.enabled\\\">\\n  <div class=\\\"form-group col-6\\\">\\n    <label for=\\\"ssid\\\">WLAN-Funknetz (SSID)</label>\\n    <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"wifi.ssid\\\" id=\\\"ssid\\\" name=\\\"ssid\\\" placeholder=\\\"WLAN-Netzwerkname\\\">\\n  </div>\\n  <div class=\\\"form-group col-6\\\">\\n    <label for=\\\"password\\\">WLAN-Netzwerkschlüssel</label>\\n    <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"wifi.password\\\" id=\\\"password\\\" name=\\\"password\\\" placeholder=\\\"Passwort\\\">\\n  </div>\\n</div>\\n<button class=\\\"btn btn-primary btn-sm\\\" type=\\\"button\\\" role=\\\"button\\\">Änderungen speichern</button>\\n<hr />\\n<h5 class=\\\"h5\\\">Mobilfunkverbindung vorhanden?</h5>\\n<button type=\\\"button\\\" role=\\\"button\\\" class=\\\"btn btn-primary btn-sm\\\" (click)=\\\"checkInternet()\\\">Teste Internetverbindung</button>\\n<br>\\n<div *ngIf=\\\"checkInternetResponse\\\">\\n  <span class=\\\"text-success\\\" *ngIf=\\\"checkInternetResponse.connected\\\">Internetaufruf erfolgreich.</span>\\n  <span class=\\\"text-danger\\\" *ngIf=\\\"!checkInternetResponse.connected\\\">Verbindung fehlgeschlagen.</span>\\n  <pre class=\\\"pre-scrollable\\\" *ngIf=\\\"checkInternetResponse.content\\\">{{checkInternetResponse.content}}</pre>\\n</div>\\n<br>\\n<div class=\\\"alert alert-info\\\">\\n  Bei aktiviertem AccessPoint, also hier im Wartungsmodus, kann sich der Raspberry Pi <strong>nicht gleichzeitig</strong> auch mit einem WLAN-Netzwerk verbinden.\\n  Daher kann beim Test nur die Internetverbindung über den Surfstick oder beim RPi 3B/3B+ auch der LAN-Anschluss getestet werden.\\n</div>\\n<p>\\n  <a class=\\\"text-danger\\\" data-toggle=\\\"collapse\\\" href=\\\"#collapseExample\\\" role=\\\"button\\\" aria-expanded=\\\"false\\\" aria-controls=\\\"collapseExample\\\">\\n    Erweiterte Einstellungen für Nutzer, die wissen was sie tun »\\n  </a>\\n</p>\\n<div class=\\\"collapse\\\" id=\\\"collapseExample\\\">\\n  <div class=\\\"card card-body\\\">\\n    <h5 class=\\\"h5\\\">HoneyPi Wartungsmodus</h5>\\n    <p>Ändere die SSID und das Passwort des AccessPoints.</p>\\n    <div class=\\\"row\\\">\\n      <div class=\\\"form-group col-6\\\">\\n        <label for=\\\"honeypiWifissid\\\">WLAN-Funknetz (SSID)</label>\\n        <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"honeypiWifi.ssid\\\" id=\\\"honeypiWifissid\\\" name=\\\"honeypiWifissid\\\" placeholder=\\\"WLAN-Netzwerkname\\\">\\n      </div>\\n      <div class=\\\"form-group col-6\\\">\\n        <label for=\\\"honeypiWifipassword\\\">WLAN-Netzwerkschlüssel</label>\\n        <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"honeypiWifi.password\\\" id=\\\"honeypiWifipassword\\\" name=\\\"honeypiWifipassword\\\" placeholder=\\\"Passwort\\\">\\n      </div>\\n    </div>\\n    <button class=\\\"btn btn-primary btn-sm\\\" type=\\\"button\\\" role=\\\"button\\\">Bisherige Konfiguration überschreiben</button>\\n  </div>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport {AppService} from \"../../services/app.service\";\nimport {Wifi} from \"../../models/wifi.model\";\n\n@Component({\n  selector: 'app-internet',\n  templateUrl: './internet.component.html',\n  styleUrls: ['./internet.component.css']\n})\nexport class InternetComponent {\n\n  public checkInternetResponse: {'connected': boolean, 'content': string};\n  public wifi: Wifi = new Wifi();\n  public honeypiWifi: Wifi = new Wifi();\n\n  constructor(private appService: AppService) { }\n\n  checkInternet(): void {\n    this.appService.checkInternet()\n      .subscribe(res => {\n        if(res) {\n          this.checkInternetResponse = <any>res;\n        }\n      }, (err: any) => {console.log(err.status); console.log(err);});\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<pre class=\\\"pre-scrollable\\\">{{log}}</pre>\\n<button class=\\\"btn btn-primary btn-sm\\\" type=\\\"button\\\" role=\\\"button\\\" (click)=\\\"getLog()\\\">Protokoll aktualisieren</button>\\n\"","import { Component, OnInit } from '@angular/core';\nimport {AppService} from \"../../services/app.service\";\n\n@Component({\n  selector: 'app-log',\n  templateUrl: './log.component.html',\n  styleUrls: ['./log.component.css']\n})\nexport class LogComponent implements OnInit {\n\n  public log: string = \"\";\n\n  constructor(private appService: AppService) { }\n\n  ngOnInit() {\n    this.getLog();\n  }\n\n  getLog(): void {\n    this.appService.getLog()\n      .subscribe(res => {\n        if(res) {\n          this.log = <any>res;\n        }\n      }, (err: any) => {console.log(err.status); console.log(err);});\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"alert alert-info\\\">\\n  Hier werden die Sensoren angezeigt, die im Reiter \\\"<strong>Angeschlossene Sensoren</strong>\\\" konfiguriert und gespeichert sind.\\n</div>\\n<pre class=\\\"pre-scrollable\\\">{{measurement}}</pre>\\n<button class=\\\"btn btn-primary btn-sm\\\" type=\\\"button\\\" role=\\\"button\\\" (click)=\\\"getMeasurement()\\\">Neue Messung abrufen</button>\\n\"","import { Component, OnInit } from '@angular/core';\nimport {AppService} from \"../../services/app.service\";\n\n@Component({\n  selector: 'app-measurement',\n  templateUrl: './measurement.component.html',\n  styleUrls: ['./measurement.component.css']\n})\nexport class MeasurementComponent implements OnInit {\n\n  public measurement;\n\n  constructor(private appService: AppService) { }\n\n  ngOnInit() {\n    this.getMeasurement();\n  }\n\n  getMeasurement(): void {\n    this.appService.getMeasurement()\n      .subscribe(res => {\n        if(res) {\n          this.measurement = <any>res;\n        }\n      }, (err: any) => {console.log(err.status); console.log(err);});\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<nav class=\\\"navbar navbar-dark bg-dark\\\">\\n  <a class=\\\"navbar-brand\\\" href=\\\"\\\">HoneyPi</a>\\n</nav>\\n\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css']\n})\nexport class NavbarComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \".myAlert-top{\\n  position: fixed;\\n  top: 5px;\\n  left:2%;\\n  width: 96%;\\n  z-index:99;\\n}\\n\\n.myAlert-bottom{\\n  position: fixed;\\n  bottom: 5px;\\n  left:2%;\\n  width: 96%;\\n  z-index:99;\\n}\\n\"","module.exports = \"<main role=\\\"main\\\" class=\\\"container\\\">\\n  <div class=\\\"jumbotron\\\">\\n    <div class=\\\"float-right\\\">\\n      <button class=\\\"btn btn-sm btn-primary\\\" type=\\\"button\\\" (click)=\\\"saveSettings()\\\">Speichern</button>\\n    </div>\\n    <h1 class=\\\"h1\\\">Einstellungen</h1>\\n    <div class=\\\"alert alert-success myAlert-top\\\" role=\\\"alert\\\" *ngIf=\\\"settingsSaved\\\">\\n      <a href=\\\"#\\\" class=\\\"close\\\" data-dismiss=\\\"alert\\\" aria-label=\\\"close\\\">&times;</a>\\n      <strong>Gespeichert!</strong> Die Einstellungen wurden gespeichert.\\n    </div>\\n    <div class=\\\"alert alert-danger myAlert-top\\\" role=\\\"alert\\\" *ngIf=\\\"settingsError\\\">\\n      <a href=\\\"#\\\" class=\\\"close\\\" data-dismiss=\\\"alert\\\" aria-label=\\\"close\\\">&times;</a>\\n      <strong>Fehler!</strong> Die Einstellungen konnten nicht gespeichert werden.\\n    </div>\\n    <div id=\\\"accordion\\\">\\n      <div class=\\\"card\\\">\\n        <div class=\\\"card-header\\\" id=\\\"headingOne\\\">\\n          <h5 class=\\\"mb-0\\\">\\n            <button class=\\\"btn btn-link collapsed\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#collapseOne\\\" aria-expanded=\\\"true\\\" aria-controls=\\\"collapseOne\\\">\\n              ThingSpeak Einstellungen\\n            </button>\\n          </h5>\\n        </div>\\n        <div id=\\\"collapseOne\\\" class=\\\"collapse\\\" aria-labelledby=\\\"headingOne\\\" data-parent=\\\"#accordion\\\">\\n          <div class=\\\"card-body\\\">\\n            <div class=\\\"form-group\\\">\\n              <label for=\\\"ts_channel_id\\\">ThingSpeak Channel-ID</label>\\n              <input type=\\\"number\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"settings.ts_channel_id\\\" id=\\\"ts_channel_id\\\" name=\\\"ts_channel_id\\\" placeholder=\\\"Channel-ID\\\">\\n            </div>\\n            <div class=\\\"form-group\\\">\\n              <label for=\\\"ts_write_key\\\">ThingSpeak Write-Key</label>\\n              <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"settings.ts_write_key\\\" id=\\\"ts_write_key\\\" name=\\\"ts_write_key\\\" placeholder=\\\"Write-Key\\\">\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"card\\\">\\n        <div class=\\\"card-header\\\" id=\\\"headingTwo\\\">\\n          <h5 class=\\\"mb-0\\\">\\n            <button class=\\\"btn btn-link collapsed\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#collapseTwo\\\" aria-expanded=\\\"false\\\" aria-controls=\\\"collapseTwo\\\">\\n              Internetverbindung\\n            </button>\\n          </h5>\\n        </div>\\n        <div id=\\\"collapseTwo\\\" class=\\\"collapse\\\" aria-labelledby=\\\"headingTwo\\\" data-parent=\\\"#accordion\\\">\\n          <div class=\\\"card-body\\\">\\n            <app-internet></app-internet>\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"card\\\">\\n        <div class=\\\"card-header\\\" id=\\\"headingThree\\\">\\n          <h5 class=\\\"mb-0\\\">\\n            <button class=\\\"btn btn-link collapsed\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#collapseThree\\\" aria-expanded=\\\"false\\\" aria-controls=\\\"collapseThree\\\">\\n              Angeschlossene Sensoren\\n            </button>\\n          </h5>\\n        </div>\\n        <div id=\\\"collapseThree\\\" class=\\\"collapse\\\" aria-labelledby=\\\"headingThree\\\" data-parent=\\\"#accordion\\\">\\n          <div class=\\\"card-body\\\">\\n            <table class=\\\"table table-bordered table-sm table-responsive-md\\\">\\n              <thead>\\n                <tr>\\n                  <th colspan=\\\"2\\\">Sensoren</th>\\n                </tr>\\n              </thead>\\n              <tbody id=\\\"sensors\\\">\\n                <ng-container *ngFor=\\\"let sensor of settings.sensors; let i = index\\\">\\n                  <tr [ngClass]=\\\"{'my-bg': (i%2 == 0)}\\\">\\n                    <td>\\n                      <select [(ngModel)]=\\\"sensor.type\\\" name=\\\"sensor-type\\\" class=\\\"custom-select\\\">\\n                        <option [ngValue]=\\\"0\\\">Temperatursensor (DS18b20)</option>\\n                        <option [ngValue]=\\\"1\\\">BME680 (Temperatur+Luftfeuchtigkeit+Luftdruck+Qualität)</option>\\n                        <option [ngValue]=\\\"2\\\">Gewichtssensor (A/D: HX711)</option>\\n                        <option [ngValue]=\\\"3\\\">Luftfeuchtigkeit und Temperatur (DHT11/DHT22)</option>\\n                      </select>\\n                    </td>\\n                    <td>\\n                      <button class=\\\"btn btn-danger float-right\\\" (click)=\\\"removeSensor(i)\\\" title=\\\"Entfernen\\\">\\n                        &#x232b;\\n                      </button>\\n                    </td>\\n                  </tr>\\n                  <tr *ngIf=\\\"sensor.type == 0\\\" [ngClass]=\\\"{'my-bg': (i%2 == 0)}\\\">\\n                    <td colspan=\\\"2\\\">\\n                      <div class=\\\"row\\\">\\n                        <div class=\\\"form-group col-6\\\">\\n                          <label for=\\\"device_id\\\">Sensor Device-ID</label>\\n                          <select [(ngModel)]=\\\"sensor.device_id\\\" id=\\\"device_id\\\" name=\\\"device_id\\\" class=\\\"custom-select\\\">\\n                            <option [ngValue]=\\\"undefined\\\">Device-ID auswählen...</option>\\n                            <ng-container *ngFor=\\\"let device of temperatureSensors\\\">\\n                              <option [ngValue]=\\\"device\\\">{{ device }}</option>\\n                            </ng-container>\\n                          </select>\\n                        </div>\\n                        <div class=\\\"form-group col-6\\\">\\n                          <settings-ts-field [label]=\\\"'ThingSpeak Feldname'\\\"\\n                                             (ts_fieldChanged)=\\\"sensor.ts_field = $event\\\"\\n                                             [ts_field]=\\\"sensor.ts_field\\\" ></settings-ts-field>\\n                        </div>\\n                      </div>\\n                      <div class=\\\"row\\\">\\n                        <div class=\\\"col-12\\\">\\n                          <div class=\\\"alert alert-info\\\" *ngIf=\\\"temperatureSensors.length == 0\\\">\\n                            Es konnten keine Temperatursensor am Gerät gefunden werden.<br>\\n                            Prüfe ob die Sensoren richtig angeschlossen sind und <a (click)=\\\"getTemperatureSensors()\\\" [routerLink]=\\\"\\\">aktualisiere</a> die Liste.\\n                          </div>\\n                        </div>\\n                      </div>\\n                    </td>\\n                  </tr>\\n                  <tr *ngIf=\\\"sensor.type == 1\\\" [ngClass]=\\\"{'my-bg': (i%2 == 0)}\\\">\\n                    <td colspan=\\\"2\\\">\\n                      <div class=\\\"row\\\">\\n                        <div class=\\\"form-group col-6\\\">\\n                          <settings-ts-field [label]=\\\"'ThingSpeak Temperatur'\\\"\\n                                             [ts_field_id]=\\\"'ts_field_temperature'\\\"\\n                                             (ts_fieldChanged)=\\\"sensor.ts_field_temperature = $event\\\"\\n                                             [ts_field]=\\\"sensor.ts_field_temperature\\\" ></settings-ts-field>\\n                        </div>\\n                        <div class=\\\"form-group col-6\\\">\\n                          <settings-ts-field [label]=\\\"'ThingSpeak Luftfeuchtigkeit'\\\"\\n                                             [ts_field_id]=\\\"'ts_field_humidity'\\\"\\n                                             (ts_fieldChanged)=\\\"sensor.ts_field_humidity = $event\\\"\\n                                             [ts_field]=\\\"sensor.ts_field_humidity\\\" ></settings-ts-field>\\n                        </div>\\n                      </div>\\n                      <div class=\\\"row\\\">\\n                        <div class=\\\"form-group col-6\\\">\\n                          <settings-ts-field [label]=\\\"'ThingSpeak Luftdruck'\\\"\\n                                             [ts_field_id]=\\\"'ts_field_air_pressure'\\\"\\n                                             (ts_fieldChanged)=\\\"sensor.ts_field_air_pressure = $event\\\"\\n                                             [ts_field]=\\\"sensor.ts_field_air_pressure\\\" ></settings-ts-field>\\n                        </div>\\n                        <div class=\\\"form-group col-6\\\">\\n                          <settings-ts-field [label]=\\\"'ThingSpeak Qualität'\\\"\\n                                             [ts_field_id]=\\\"'ts_field_air_quality'\\\"\\n                                             (ts_fieldChanged)=\\\"sensor.ts_field_air_quality = $event\\\"\\n                                             [ts_field]=\\\"sensor.ts_field_air_quality\\\" ></settings-ts-field>\\n                        </div>\\n                      </div>\\n                    </td>\\n                  </tr>\\n                  <tr *ngIf=\\\"sensor.type == 2\\\" [ngClass]=\\\"{'my-bg': (i%2 == 0)}\\\">\\n                    <td colspan=\\\"2\\\">\\n                      <div class=\\\"row\\\">\\n                        <div class=\\\"form-group col-6\\\">\\n                          <label for=\\\"pin_dt\\\">GPIO-PIN DT</label>\\n                          <input type=\\\"number\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"sensor.pin_dt\\\" id=\\\"pin_dt\\\" name=\\\"pin_dt\\\" placeholder=\\\"DT\\\">\\n                        </div>\\n                        <div class=\\\"form-group col-6\\\">\\n                          <label for=\\\"pin_sck\\\">GPIO-PIN SCK</label>\\n                          <input type=\\\"number\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"sensor.pin_sck\\\" id=\\\"pin_sck\\\" name=\\\"pin_sck\\\" placeholder=\\\"SCK\\\">\\n                        </div>\\n                      </div>\\n                      <div class=\\\"row\\\">\\n                        <div class=\\\"form-group col-6\\\">\\n                          <label for=\\\"channel\\\">HX711 Channel</label>\\n                          <select [(ngModel)]=\\\"sensor.channel\\\" name=\\\"channel\\\" id=\\\"channel\\\" class=\\\"custom-select\\\">\\n                            <option [ngValue]=\\\"undefined\\\">Channel auswählen...</option>\\n                            <option [ngValue]=\\\"'A'\\\">Channel A</option>\\n                            <option [ngValue]=\\\"'B'\\\">Channel B</option>\\n                          </select>\\n                        </div>\\n                        <div class=\\\"form-group col-6\\\">\\n                          <settings-ts-field [label]=\\\"'ThingSpeak Feldname'\\\"\\n                                             (ts_fieldChanged)=\\\"sensor.ts_field = $event\\\"\\n                                             [ts_field]=\\\"sensor.ts_field\\\" ></settings-ts-field>\\n                        </div>\\n                      </div>\\n                      <div class=\\\"row\\\">\\n                        <div class=\\\"form-group col-6\\\">\\n                          <label for=\\\"offset\\\">Wägezellen Offset</label>\\n                          <input type=\\\"number\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"sensor.offset\\\" id=\\\"offset\\\" name=\\\"offset\\\" placeholder=\\\"Offset\\\">\\n                        </div>\\n                        <div class=\\\"form-group col-6\\\">\\n                          <label for=\\\"reference_unit\\\">Wägezellen Skalierungswert</label>\\n                          <input type=\\\"number\\\" step=\\\"0.001\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"sensor.reference_unit\\\" id=\\\"reference_unit\\\" name=\\\"reference_unit\\\" placeholder=\\\"Skalierungswert\\\">\\n                        </div>\\n                      </div>\\n                      <div class=\\\"row\\\">\\n                        <div class=\\\"col-6\\\">\\n                          <div class=\\\"alert alert-info\\\">\\n                            <b>Offset:</b> Beeinflusst das Messergebnis indem das Offset vom Messwert abgezogen wird.\\n                          </div>\\n                        </div>\\n                        <div class=\\\"col-6\\\">\\n                          <div class=\\\"alert alert-info\\\">\\n                            <b>Skalierungswert:</b> Beeinflusst das Messergebnis indem (Messwert-Offset) durch den Skalierungswert geteilt wird.\\n                            <br />\\n                            <i>Wertebereicht: 0.0 bis 1.0 und 1 bis ...</i>\\n                          </div>\\n                        </div>\\n                      </div>\\n                    </td>\\n                  </tr>\\n                  <tr *ngIf=\\\"sensor.type == 3\\\" [ngClass]=\\\"{'my-bg': (i%2 == 0)}\\\">\\n                    <td colspan=\\\"2\\\">\\n                      <div class=\\\"row\\\">\\n                        <div class=\\\"form-group col-6\\\">\\n                          <settings-ts-field [label]=\\\"'ThingSpeak Temperatur'\\\"\\n                                             [ts_field_id]=\\\"'ts_field_temperature'\\\"\\n                                             (ts_fieldChanged)=\\\"sensor.ts_field_temperature = $event\\\"\\n                                             [ts_field]=\\\"sensor.ts_field_temperature\\\" ></settings-ts-field>\\n                        </div>\\n                        <div class=\\\"form-group col-6\\\">\\n                          <settings-ts-field [label]=\\\"'ThingSpeak Luftfeuchtigkeit'\\\"\\n                                             [ts_field_id]=\\\"'ts_field_humidity'\\\"\\n                                             (ts_fieldChanged)=\\\"sensor.ts_field_humidity = $event\\\"\\n                                             [ts_field]=\\\"sensor.ts_field_humidity\\\" ></settings-ts-field>\\n                        </div>\\n                      </div>\\n                      <div class=\\\"row\\\">\\n                        <div class=\\\"form-group col-6\\\">\\n                          <label for=\\\"pin\\\">GPIO-PIN </label>\\n                          <input type=\\\"number\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"sensor.pin\\\" id=\\\"pin\\\" name=\\\"pin\\\" placeholder=\\\"PIN\\\" />\\n                        </div>\\n                      </div>\\n                    </td>\\n                  </tr>\\n                </ng-container>\\n                <tr>\\n                  <td colspan=\\\"2\\\">\\n                    <button class=\\\"btn btn-primary\\\" (click)=\\\"addSensor()\\\" title=\\\"Hinzufügen\\\">\\n                      &#x2b; Sensor hinzufügen\\n                    </button>\\n                  </td>\\n                </tr>\\n              </tbody>\\n            </table>\\n            <hr />\\n            <div class=\\\"form-group\\\">\\n              <label for=\\\"button_pin\\\">Wartungsmodus-Taster GPIO-PIN</label>\\n              <input type=\\\"number\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"settings.button_pin\\\" id=\\\"button_pin\\\" name=\\\"button_pin\\\" placeholder=\\\"GPIO-PIN\\\" required>\\n            </div>\\n            <div class=\\\"alert alert-info\\\">Die Änderung am Taster wird nach einem Neustart aktiv.</div>\\n            <div class=\\\"form-group\\\">\\n              <label for=\\\"interval\\\">Messintervall</label>\\n              <select [(ngModel)]=\\\"settings.interval\\\" id=\\\"interval\\\" name=\\\"interval\\\" class=\\\"custom-select\\\">\\n                <option [ngValue]=\\\"undefined\\\">Intervall auswählen...</option>\\n                <option [ngValue]=\\\"60\\\">1min</option>\\n                <option [ngValue]=\\\"300\\\">5min</option>\\n                <option [ngValue]=\\\"600\\\">10min</option>\\n                <option [ngValue]=\\\"900\\\">15min</option>\\n                <option [ngValue]=\\\"1800\\\">30min</option>\\n                <option [ngValue]=\\\"3600\\\">60min</option>\\n              </select>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"card\\\">\\n        <div class=\\\"card-header\\\" id=\\\"headingFive\\\">\\n          <h5 class=\\\"mb-0\\\">\\n            <button class=\\\"btn btn-link collapsed\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#collapseHive\\\" aria-expanded=\\\"false\\\" aria-controls=\\\"collapseHive\\\">\\n              Messdaten\\n            </button>\\n          </h5>\\n        </div>\\n        <div id=\\\"collapseHive\\\" class=\\\"collapse\\\" aria-labelledby=\\\"headingFive\\\" data-parent=\\\"#accordion\\\">\\n          <div class=\\\"card-body\\\">\\n            <app-measurement></app-measurement>\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"card\\\">\\n        <div class=\\\"card-header\\\" id=\\\"headingFour\\\">\\n          <h5 class=\\\"mb-0\\\">\\n            <button class=\\\"btn btn-link collapsed\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#collapseFour\\\" aria-expanded=\\\"false\\\" aria-controls=\\\"collapseFour\\\">\\n              Protokoll\\n            </button>\\n          </h5>\\n        </div>\\n        <div id=\\\"collapseFour\\\" class=\\\"collapse\\\" aria-labelledby=\\\"headingFour\\\" data-parent=\\\"#accordion\\\">\\n          <div class=\\\"card-body\\\">\\n            <app-log></app-log>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</main>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { AppService } from '../../services/app.service';\nimport { Settings } from \"../../models/settings.model\";\nimport { Sensor } from '../../models/sensor.model';\n\n@Component({\n  selector: 'app-settings',\n  templateUrl: './settings.component.html',\n  styleUrls: ['./settings.component.css']\n})\nexport class SettingsComponent implements OnInit {\n\n  public settings: Settings = new Settings();\n  public temperatureSensors: Array<any> = [];\n  public settingsSaved: boolean = false;\n  public settingsError: boolean = false;\n\n  constructor(private appService: AppService) { }\n\n  ngOnInit() {\n    /* initial load */\n    this.getSettings();\n    this.getTemperatureSensors();\n  }\n\n  private n: any;\n  hideAlertsTimer() {\n    //wait 4 Seconds and hide\n    if (this.n) {\n      clearTimeout(this.n);\n    }\n    this.n = window.setTimeout(() => {\n      this.settingsSaved = false;\n      this.settingsError = false;\n    }, 4000);\n  }\n\n  getSettings(): void {\n    this.appService.getSettings()\n      .subscribe(res => {\n        if(res) {\n          this.settings = <any>res;\n        }\n      }, (err: any) => {console.log(err.status); console.log(err);});\n  }\n\n  saveSettings(): void  {\n    this.appService.setSettings(this.settings).subscribe(res => {\n      console.log(res);\n      // load new Settings\n      this.getSettings();\n      this.settingsSaved = true;\n      this.settingsError = false;\n      this.hideAlertsTimer();\n    }, (err: any) => {\n      console.log(err.status);\n      console.log(err);\n      this.settingsError = true;\n      this.hideAlertsTimer();\n    });\n  }\n\n  /* Sensors */\n\n  addSensor(): void {\n    this.settings.sensors.push(new Sensor());\n  }\n\n  removeSensor(index: number): void {\n    this.settings.sensors.splice(index,1);\n  }\n\n  getTemperatureSensors(): void {\n    this.appService.getTemperatureSensors()\n      .subscribe(res => {\n        if(res) {\n          this.temperatureSensors = <any>res;\n        }\n      }, (err: any) => {console.log(err.status); console.log(err);});\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<label for=\\\"{{ ts_field_id }}\\\">{{ label }}</label>\\n<select [(ngModel)]=\\\"ts_field\\\" id=\\\"{{ ts_field_id }}\\\" name=\\\"{{ ts_field_id }}\\\" (ngModelChange)=\\\"onChange($event)\\\" class=\\\"custom-select\\\">\\n  <option [ngValue]=\\\"undefined\\\">Feld auswählen...</option>\\n  <option value=\\\"field1\\\">Feld 1</option>\\n  <option value=\\\"field2\\\">Feld 2</option>\\n  <option value=\\\"field3\\\">Feld 3</option>\\n  <option value=\\\"field4\\\">Feld 4</option>\\n  <option value=\\\"field5\\\">Feld 5</option>\\n  <option value=\\\"field6\\\">Feld 6</option>\\n  <option value=\\\"field7\\\">Feld 7</option>\\n  <option value=\\\"field8\\\">Feld 8</option>\\n</select>\\n\"","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\n\n@Component({\n  selector: 'settings-ts-field',\n  templateUrl: './ts-field.component.html',\n  styleUrls: ['./ts-field.component.css']\n})\nexport class TsFieldComponent implements OnInit {\n\n\n  constructor() { }\n\n  @Input() label: string;\n  @Input() ts_field_id: string = \"ts_field\";\n  @Input() ts_field: any;\n  @Output() ts_fieldChanged = new EventEmitter<boolean>();\n\n  onChange(){\n    this.ts_fieldChanged.emit(this.ts_field);\n  }\n\n  ngOnInit() {\n  }\n\n}\n","export class Sensor {\n  constructor(type: number = 0) {\n  }\n  /*\n  Type 0: DS18b20\n  Type 1: BME680\n  Type 2: HX711\n  Type 3: DHT11/DHT22\n   */\n\n  type: number;\n  name: string;\n  ts_field: string;\n  // Gewicht spezifisch:\n  reference_unit: number;\n  channel: string;\n  offset: number;\n  pin_dt: number;\n  pin_sck: number;\n  // BME680 spezifisch:\n  ts_field_air_pressure: string;\n  ts_field_air_quality: string;\n  // BME680 UND DHT11:\n  ts_field_temperature: string;\n  ts_field_humidity: string;\n  // DS18b20 spezifisch:\n  device_id: string;\n  // DHT11\n  pin: number;\n}\n","import { Sensor } from \"./sensor.model\";\n\nexport class Settings {\n\n  constructor() {\n    this.sensors = new Array<Sensor>();\n  }\n  ts_channel_id: number;\n  ts_write_key: string;\n  sim_apn: string;\n  interval: number;\n  button_pin: number;\n  sensors: Sensor[];\n}\n","export class Wifi {\n  enabled: boolean;\n  ssid: string;\n  password: string;\n}\n","import { Injectable } from '@angular/core';\nimport { Settings } from \"../models/settings.model\";\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from \"rxjs/Observable\";\nimport \"rxjs/add/operator/map\";\n\nconst apiUrl = './backend/';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AppService {\n\n  constructor(private http: HttpClient) { }\n\n  getSettings(): Observable<Response> {\n    let timestamp = \"&t=\" + ((new Date()).getTime());\n    return this.http.get(apiUrl + 'settings.php?getSettings' + timestamp)\n      .map((response: Response) => {\n        if (response) {\n          return response;\n        }\n      });\n  }\n\n  setSettings(newSettings: Settings): Observable<Response> {\n    return this.http.post(apiUrl + 'settings.php?setSettings', JSON.stringify(newSettings)).map((response: Response) => {\n      return response;\n    });\n  }\n\n  getTemperatureSensors(): Observable<Response> {\n    let timestamp = \"t=\" + ((new Date()).getTime());\n    return this.http.get(apiUrl + 'ds18b20.php?getSettings&' + timestamp)\n      .map((response: Response) => {\n        if (response) {\n          return response;\n        }\n      });\n  }\n\n  getLog(): Observable<Response> {\n    let timestamp = \"t=\" + ((new Date()).getTime());\n    return this.http.get(apiUrl + 'log.php?' + timestamp)\n      .map((response: Response) => {\n        if (response) {\n          return response;\n        }\n      });\n  }\n\n  getMeasurement(): Observable<Response> {\n    let timestamp = \"t=\" + ((new Date()).getTime());\n    return this.http.get(apiUrl + 'measurement.php?' + timestamp)\n      .map((response: Response) => {\n        if (response) {\n          return response;\n        }\n      });\n  }\n\n  checkInternet(): Observable<Response> {\n    let timestamp = \"t=\" + ((new Date()).getTime());\n    return this.http.get(apiUrl + 'check_internet.php?' + timestamp)\n      .map((response: Response) => {\n        if (response) {\n          return response;\n        }\n      });\n  }\n\n}\n","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false\n};\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}