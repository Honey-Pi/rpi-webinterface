{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/components/footer/footer.component.css","webpack:///./src/app/components/footer/footer.component.html","webpack:///./src/app/components/footer/footer.component.ts","webpack:///./src/app/components/navbar/navbar.component.css","webpack:///./src/app/components/navbar/navbar.component.html","webpack:///./src/app/components/navbar/navbar.component.ts","webpack:///./src/app/components/settings/settings.component.css","webpack:///./src/app/components/settings/settings.component.html","webpack:///./src/app/components/settings/settings.component.ts","webpack:///./src/app/components/settings/ts-field/ts-field.component.css","webpack:///./src/app/components/settings/ts-field/ts-field.component.html","webpack:///./src/app/components/settings/ts-field/ts-field.component.ts","webpack:///./src/app/models/sensor.model.ts","webpack:///./src/app/models/settings.model.ts","webpack:///./src/app/services/app.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<app-navbar></app-navbar>\\r\\n<router-outlet></router-outlet>\\r\\n<app-footer></app-footer>\\r\\n\"","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { SettingsComponent } from './components/settings/settings.component';\r\nimport { NavbarComponent } from './components/navbar/navbar.component';\r\nimport { FooterComponent } from './components/footer/footer.component';\nimport { TsFieldComponent } from './components/settings/ts-field/ts-field.component';\r\n\r\nconst appRoutes: Routes = [\r\n  { path: '', component: SettingsComponent }\r\n];\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    SettingsComponent,\r\n    NavbarComponent,\r\n    FooterComponent,\r\n    TsFieldComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    HttpClientModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    RouterModule.forRoot(\r\n      appRoutes\r\n    )\r\n  ],\r\n  providers: [HttpClientModule],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","module.exports = \"\"","module.exports = \"<footer class=\\\"footer\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n    <span class=\\\"text-muted\\\">&copy; <a href=\\\"https://honey-pi.de\\\" target=\\\"_blank\\\">Honey-Pi.de</a> | v{{ appVersion }}</span>\\r\\n  </div>\\r\\n</footer>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\n\r\ndeclare function require(moduleName: string): any;\r\nconst { version: appVersion } = require('../../../../package.json')\r\n\r\n@Component({\r\n  selector: 'app-footer',\r\n  templateUrl: './footer.component.html',\r\n  styleUrls: ['./footer.component.css']\r\n})\r\nexport class FooterComponent implements OnInit {\r\n\r\n  public appVersion;\r\n\r\n  constructor() {\r\n    this.appVersion = appVersion;\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","module.exports = \"\"","module.exports = \"<nav class=\\\"navbar navbar-dark bg-dark\\\">\\r\\n  <a class=\\\"navbar-brand\\\" href=\\\"\\\">HoneyPi</a>\\r\\n</nav>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-navbar',\r\n  templateUrl: './navbar.component.html',\r\n  styleUrls: ['./navbar.component.css']\r\n})\r\nexport class NavbarComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","module.exports = \"\"","module.exports = \"<main role=\\\"main\\\" class=\\\"container\\\">\\r\\n  <div class=\\\"jumbotron\\\">\\r\\n    <div class=\\\"float-right\\\">\\r\\n      <button class=\\\"btn btn-sm btn-primary\\\" type=\\\"button\\\" (click)=\\\"saveSettings()\\\">Speichern</button>\\r\\n    </div>\\r\\n    <h1>Hardware Einstellungen</h1>\\r\\n    <div id=\\\"accordion\\\">\\r\\n      <div class=\\\"card\\\">\\r\\n        <div class=\\\"card-header\\\" id=\\\"headingOne\\\">\\r\\n          <h5 class=\\\"mb-0\\\">\\r\\n            <button class=\\\"btn btn-link collapsed\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#collapseOne\\\" aria-expanded=\\\"true\\\" aria-controls=\\\"collapseOne\\\">\\r\\n              ThingsSpeak Einstellungen\\r\\n            </button>\\r\\n          </h5>\\r\\n        </div>\\r\\n        <div id=\\\"collapseOne\\\" class=\\\"collapse\\\" aria-labelledby=\\\"headingOne\\\" data-parent=\\\"#accordion\\\">\\r\\n          <div class=\\\"card-body\\\">\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"ts_channel_id\\\">ThingsSpeak Channel-ID</label>\\r\\n              <input type=\\\"number\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"settings.ts_channel_id\\\" id=\\\"ts_channel_id\\\" name=\\\"ts_channel_id\\\" placeholder=\\\"Channel-ID\\\">\\r\\n            </div>\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"ts_write_key\\\">ThingsSpeak Write-Key</label>\\r\\n              <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"settings.ts_write_key\\\" id=\\\"ts_write_key\\\" name=\\\"ts_write_key\\\" placeholder=\\\"Write-Key\\\">\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n      <div class=\\\"card\\\">\\r\\n        <div class=\\\"card-header\\\" id=\\\"headingTwo\\\">\\r\\n          <h5 class=\\\"mb-0\\\">\\r\\n            <button class=\\\"btn btn-link collapsed\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#collapseTwo\\\" aria-expanded=\\\"false\\\" aria-controls=\\\"collapseTwo\\\">\\r\\n              Mobilfunkübertragung\\r\\n            </button>\\r\\n          </h5>\\r\\n        </div>\\r\\n        <div id=\\\"collapseTwo\\\" class=\\\"collapse\\\" aria-labelledby=\\\"headingTwo\\\" data-parent=\\\"#accordion\\\">\\r\\n          <div class=\\\"card-body\\\">\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"sim_apn\\\">APN der SIM-Karte</label>\\r\\n              <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"settings.sim_apn\\\" id=\\\"sim_apn\\\" name=\\\"sim_apn\\\" placeholder=\\\"APN\\\">\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n      <div class=\\\"card\\\">\\r\\n        <div class=\\\"card-header\\\" id=\\\"headingThree\\\">\\r\\n          <h5 class=\\\"mb-0\\\">\\r\\n            <button class=\\\"btn btn-link collapsed\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#collapseThree\\\" aria-expanded=\\\"false\\\" aria-controls=\\\"collapseThree\\\">\\r\\n              Angeschlossene Sensoren\\r\\n            </button>\\r\\n          </h5>\\r\\n        </div>\\r\\n        <div id=\\\"collapseThree\\\" class=\\\"collapse\\\" aria-labelledby=\\\"headingThree\\\" data-parent=\\\"#accordion\\\">\\r\\n          <div class=\\\"card-body\\\">\\r\\n            <table class=\\\"table table-bordered table-sm table-responsive-md\\\">\\r\\n              <thead>\\r\\n                <tr>\\r\\n                  <th colspan=\\\"2\\\">Sensoren</th>\\r\\n                </tr>\\r\\n              </thead>\\r\\n              <tbody id=\\\"sensors\\\">\\r\\n                <ng-container *ngFor=\\\"let sensor of settings.sensors; let i = index\\\">\\r\\n                  <tr [ngClass]=\\\"{'my-bg': (i%2 == 0)}\\\">\\r\\n                    <td>\\r\\n                      <select [(ngModel)]=\\\"sensor.type\\\" name=\\\"sensor-type\\\" class=\\\"custom-select\\\">\\r\\n                        <option [ngValue]=\\\"0\\\">Temperatursensor (DS18b20)</option>\\r\\n                        <option [ngValue]=\\\"1\\\">BME680 (Temperatur+Luftfeuchtigkeit+Luftdruck+Qualität)</option>\\r\\n                        <option [ngValue]=\\\"2\\\">Gewichtssensor (A/D: HX711)</option>\\r\\n                      </select>\\r\\n                    </td>\\r\\n                    <td>\\r\\n                      <button class=\\\"btn btn-danger float-right\\\" (click)=\\\"removeSensor(i)\\\" title=\\\"Entfernen\\\">\\r\\n                        &#x232b;\\r\\n                      </button>\\r\\n                    </td>\\r\\n                  </tr>\\r\\n                  <tr *ngIf=\\\"sensor.type == 0\\\" [ngClass]=\\\"{'my-bg': (i%2 == 0)}\\\">\\r\\n                    <td colspan=\\\"2\\\">\\r\\n                      <div class=\\\"row\\\">\\r\\n                        <div class=\\\"form-group col-6\\\">\\r\\n                          <label for=\\\"device_id\\\">Sensor Device-ID</label>\\r\\n                          <select [(ngModel)]=\\\"sensor.device_id\\\" id=\\\"device_id\\\" name=\\\"device_id\\\" class=\\\"custom-select\\\">\\r\\n                            <option [ngValue]=\\\"undefined\\\">Device-ID auswählen...</option>\\r\\n                            <ng-container *ngFor=\\\"let device of temperatureSensors\\\">\\r\\n                              <option [ngValue]=\\\"device\\\">{{ device }}</option>\\r\\n                            </ng-container>\\r\\n                          </select>\\r\\n                        </div>\\r\\n                        <div class=\\\"form-group col-6\\\">\\r\\n                          <settings-ts-field [label]=\\\"'ThingSpeak Feldname'\\\"\\r\\n                                             (ts_fieldChanged)=\\\"sensor.ts_field = $event\\\"\\r\\n                                             [ts_field]=\\\"sensor.ts_field\\\" ></settings-ts-field>\\r\\n                        </div>\\r\\n                      </div>\\r\\n                      <div class=\\\"row\\\">\\r\\n                        <div class=\\\"col-12\\\">\\r\\n                          <div class=\\\"alert alert-info\\\" *ngIf=\\\"temperatureSensors.length == 0\\\">\\r\\n                            Es konnten keine Temperatursensor am Gerät gefunden werden.<br>\\r\\n                            Prüfe ob die Sensoren angeschlossen und <a (click)=\\\"getTemperatureSensors()\\\" [routerLink]=\\\"\\\">aktualisiere</a> die Liste.\\r\\n                          </div>\\r\\n                        </div>\\r\\n                      </div>\\r\\n                    </td>\\r\\n                  </tr>\\r\\n                  <tr *ngIf=\\\"sensor.type == 1\\\" [ngClass]=\\\"{'my-bg': (i%2 == 0)}\\\">\\r\\n                    <td colspan=\\\"2\\\">\\r\\n                      <div class=\\\"row\\\">\\r\\n                        <div class=\\\"form-group col-6\\\">\\r\\n                          <settings-ts-field [label]=\\\"'ThingSpeak Temperatur'\\\"\\r\\n                                             [ts_field_id]=\\\"'ts_field_temperature'\\\"\\r\\n                                             (ts_fieldChanged)=\\\"sensor.ts_field_temperature = $event\\\"\\r\\n                                             [ts_field]=\\\"sensor.ts_field_temperature\\\" ></settings-ts-field>\\r\\n                        </div>\\r\\n                        <div class=\\\"form-group col-6\\\">\\r\\n                          <settings-ts-field [label]=\\\"'ThingSpeak Luftfeuchtigkeit'\\\"\\r\\n                                             [ts_field_id]=\\\"'ts_field_humidity'\\\"\\r\\n                                             (ts_fieldChanged)=\\\"sensor.ts_field_humidity = $event\\\"\\r\\n                                             [ts_field]=\\\"sensor.ts_field_humidity\\\" ></settings-ts-field>\\r\\n                        </div>\\r\\n                      </div>\\r\\n                      <div class=\\\"row\\\">\\r\\n                        <div class=\\\"form-group col-6\\\">\\r\\n                          <settings-ts-field [label]=\\\"'ThingSpeak Luftdruck'\\\"\\r\\n                                             [ts_field_id]=\\\"'ts_field_air_pressure'\\\"\\r\\n                                             (ts_fieldChanged)=\\\"sensor.ts_field_air_pressure = $event\\\"\\r\\n                                             [ts_field]=\\\"sensor.ts_field_air_pressure\\\" ></settings-ts-field>\\r\\n                        </div>\\r\\n                        <div class=\\\"form-group col-6\\\">\\r\\n                          <settings-ts-field [label]=\\\"'ThingSpeak Qualität'\\\"\\r\\n                                             [ts_field_id]=\\\"'ts_field_air_quality'\\\"\\r\\n                                             (ts_fieldChanged)=\\\"sensor.ts_field_air_quality = $event\\\"\\r\\n                                             [ts_field]=\\\"sensor.ts_field_air_quality\\\" ></settings-ts-field>\\r\\n                        </div>\\r\\n                      </div>\\r\\n                    </td>\\r\\n                  </tr>\\r\\n                  <tr *ngIf=\\\"sensor.type == 2\\\" [ngClass]=\\\"{'my-bg': (i%2 == 0)}\\\">\\r\\n                    <td colspan=\\\"2\\\">\\r\\n                      <div class=\\\"row\\\">\\r\\n                        <div class=\\\"form-group col-6\\\">\\r\\n                          <label for=\\\"pin_dt\\\">GPIO-PIN DT</label>\\r\\n                          <input type=\\\"number\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"sensor.pin_dt\\\" id=\\\"pin_dt\\\" name=\\\"pin_dt\\\" placeholder=\\\"DT\\\">\\r\\n                        </div>\\r\\n                        <div class=\\\"form-group col-6\\\">\\r\\n                          <label for=\\\"pin_sck\\\">GPIO-PIN SCK</label>\\r\\n                          <input type=\\\"number\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"sensor.pin_sck\\\" id=\\\"pin_sck\\\" name=\\\"pin_sck\\\" placeholder=\\\"SCK\\\">\\r\\n                        </div>\\r\\n                      </div>\\r\\n                      <div class=\\\"row\\\">\\r\\n                        <div class=\\\"form-group col-6\\\">\\r\\n                          <label for=\\\"reference_unit\\\">Wägezellen Kalibrierungswert</label>\\r\\n                          <input type=\\\"string\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"sensor.reference_unit\\\" id=\\\"reference_unit\\\" name=\\\"reference_unit\\\" placeholder=\\\"Kalibrierungswert\\\">\\r\\n                        </div>\\r\\n                        <div class=\\\"form-group col-6\\\">\\r\\n                          <settings-ts-field [label]=\\\"'ThingSpeak Feldname'\\\"\\r\\n                                             (ts_fieldChanged)=\\\"sensor.ts_field = $event\\\"\\r\\n                                             [ts_field]=\\\"sensor.ts_field\\\" ></settings-ts-field>\\r\\n                        </div>\\r\\n                        <div class=\\\"col-12\\\">\\r\\n                          <div class=\\\"alert alert-info\\\"><b>Kalibrierungswert ausrechnen:</b><br>\\r\\n                            1. Setze den Kalibrierungswert auf 1<br>\\r\\n                            2. Platziere genau 2kg (2000g) auf die Waage<br>\\r\\n                            3. Teile den durchschnittlichen Messwert durch die 2kg: 184000/2000 = <b>Kalibrierungswert</b>\\r\\n                          </div>\\r\\n                        </div>\\r\\n                      </div>\\r\\n                    </td>\\r\\n                  </tr>\\r\\n                </ng-container>\\r\\n                <tr>\\r\\n                  <td colspan=\\\"2\\\">\\r\\n                    <button class=\\\"btn btn-primary\\\" (click)=\\\"addSensor()\\\" title=\\\"Hinzufügen\\\">\\r\\n                      &#x2b; Sensor hinzufügen\\r\\n                    </button>\\r\\n                  </td>\\r\\n                </tr>\\r\\n              </tbody>\\r\\n            </table>\\r\\n            <hr />\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"button_pin\\\">Wartungsmodus-Taster GPIO-PIN</label>\\r\\n              <input type=\\\"number\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"settings.button_pin\\\" id=\\\"button_pin\\\" name=\\\"button_pin\\\" placeholder=\\\"GPIO-PIN\\\">\\r\\n            </div>\\r\\n            <div class=\\\"alert alert-info\\\">Eine Änderung am GPIO-PIN des Tasters erfordert einen Neustart des Gerätes.</div>\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"interval\\\">Messintervall</label>\\r\\n              <select [(ngModel)]=\\\"settings.interval\\\" id=\\\"interval\\\" name=\\\"interval\\\" class=\\\"custom-select\\\">\\r\\n                <option [ngValue]=\\\"undefined\\\">Intervall auswählen...</option>\\r\\n                <option [ngValue]=\\\"60\\\">1min</option>\\r\\n                <option [ngValue]=\\\"300\\\">5min</option>\\r\\n                <option [ngValue]=\\\"600\\\">10min</option>\\r\\n                <option [ngValue]=\\\"900\\\">15min</option>\\r\\n                <option [ngValue]=\\\"1800\\\">30min</option>\\r\\n              </select>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</main>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { AppService } from '../../services/app.service';\r\nimport { Settings } from \"../../models/settings.model\";\r\nimport { Sensor } from '../../models/sensor.model';\r\n\r\n@Component({\r\n  selector: 'app-settings',\r\n  templateUrl: './settings.component.html',\r\n  styleUrls: ['./settings.component.css']\r\n})\r\nexport class SettingsComponent implements OnInit {\r\n\r\n  public settings: Settings = new Settings();\r\n  public temperatureSensors: Array<any> = new Array<any>();\r\n  constructor(private appService: AppService) { }\r\n\r\n  ngOnInit() {\r\n    /* initial load */\r\n    this.getSettings();\r\n    this.getTemperatureSensors();\r\n  }\r\n\r\n  getSettings(): void {\r\n    this.appService.getSettings()\r\n      .subscribe(res => {\r\n        if(res) {\r\n          this.settings = <any>res;\r\n        }\r\n      }, (err: any) => {console.log(err.status); console.log(err);});\r\n  }\r\n\r\n  saveSettings(): void  {\r\n    this.appService.setSettings(this.settings).subscribe(res => {\r\n      console.log(res);\r\n      // load new Settings\r\n      this.getSettings();\r\n    }, (err: any) => {console.log(err.status); console.log(err);});\r\n  }\r\n\r\n  /* Sensors */\r\n\r\n  addSensor(): void {\r\n    this.settings.sensors.push(new Sensor());\r\n  }\r\n\r\n  removeSensor(index: number): void {\r\n    this.settings.sensors.splice(index,1);\r\n  }\r\n\r\n  getTemperatureSensors(): void {\r\n    this.appService.getTemperatureSensors()\r\n      .subscribe(res => {\r\n        if(res) {\r\n          this.temperatureSensors = <any>res;\r\n        }\r\n      }, (err: any) => {console.log(err.status); console.log(err);});\r\n  }\r\n\r\n}\r\n","module.exports = \"\"","module.exports = \"<label for=\\\"{{ ts_field_id }}\\\">{{ label }}</label>\\n<select [(ngModel)]=\\\"ts_field\\\" id=\\\"{{ ts_field_id }}\\\" name=\\\"{{ ts_field_id }}\\\" (ngModelChange)=\\\"onChange($event)\\\" class=\\\"custom-select\\\">\\n  <option [ngValue]=\\\"undefined\\\">Feld auswählen...</option>\\n  <option value=\\\"field1\\\">Feld 1</option>\\n  <option value=\\\"field2\\\">Feld 2</option>\\n  <option value=\\\"field3\\\">Feld 3</option>\\n  <option value=\\\"field4\\\">Feld 4</option>\\n  <option value=\\\"field5\\\">Feld 5</option>\\n  <option value=\\\"field6\\\">Feld 6</option>\\n  <option value=\\\"field7\\\">Feld 7</option>\\n  <option value=\\\"field8\\\">Feld 8</option>\\n</select>\\n\"","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\n\n@Component({\n  selector: 'settings-ts-field',\n  templateUrl: './ts-field.component.html',\n  styleUrls: ['./ts-field.component.css']\n})\nexport class TsFieldComponent implements OnInit {\n\n\n  constructor() { }\n\n  @Input() label: string;\n  @Input() ts_field_id: string = \"ts_field\";\n  @Input() ts_field: any;\n  @Output() ts_fieldChanged = new EventEmitter<boolean>();\n\n  onChange(){\n    this.ts_fieldChanged.emit(this.ts_field);\n  }\n\n  ngOnInit() {\n  }\n\n}\n","export class Sensor {\r\n  constructor(type: number = 0) {\r\n  }\r\n  /*\r\n  Type 0: DS18b20\r\n  Type 1: BME680\r\n  Type 2: HX711\r\n   */\r\n\r\n  type: number;\r\n  name: string;\r\n  ts_field: string;\r\n  // Gewicht spezifisch:\r\n  reference_unit: number;\r\n  pin_dt: number;\r\n  pin_sck: number;\r\n  // BME680 spezifisch:\r\n  ts_field_temperature: string;\r\n  ts_field_humidity: string;\r\n  ts_field_air_pressure: string;\r\n  ts_field_air_quality: string;\r\n  // DS18b20 spezifisch:\r\n  device_id: string;\r\n}\r\n","import { Sensor } from \"./sensor.model\";\r\n\r\nexport class Settings {\r\n\r\n  constructor() {\r\n    this.sensors = new Array<Sensor>();\r\n  }\r\n  ts_channel_id: number;\r\n  ts_write_key: string;\r\n  sim_apn: string;\r\n  interval: number;\r\n  button_pin: number;\r\n  sensors: Sensor[];\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Settings } from \"../models/settings.model\";\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport \"rxjs/add/operator/map\";\r\n\r\nconst apiUrl = './backend/';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AppService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getSettings(): Observable<Response> {\r\n    let timestamp = \"&t=\" + ((new Date()).getTime());\r\n    return this.http.get(apiUrl + 'settings.php?getSettings' + timestamp)\r\n      .map((response: Response) => {\r\n        if (response) {\r\n          return response;\r\n        }\r\n      });\r\n  }\r\n\r\n  getTemperatureSensors(): Observable<Response> {\r\n    let timestamp = \"&t=\" + ((new Date()).getTime());\r\n    return this.http.get(apiUrl + 'ds18b20.php?getSettings' + timestamp)\r\n      .map((response: Response) => {\r\n        if (response) {\r\n          return response;\r\n        }\r\n      });\r\n  }\r\n\r\n  setSettings(newSettings: Settings): Observable<Response> {\r\n    return this.http.post(apiUrl + 'settings.php?setSettings', JSON.stringify(newSettings)).map((response: Response) => {\r\n      return response;\r\n    });\r\n  }\r\n}\r\n","// The file contents for the current environment will overwrite these during build.\r\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\r\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\r\n// The list of which env maps to which file can be found in `.angular-cli.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.log(err));\r\n"],"sourceRoot":""}